man <- read.table("C:\\Users\\Sid\\AppData\\Local\\Temp\\RtmpEBn8J1\\data12cc430c2167", header=TRUE, quote="\"")
View(man)
install.packages("slidify")
install.packages("devtools")
install.packages("slidify")
a -> c(1:50)
a <- c(1:50)
barplot(a)
a <- runif(50, 1, 100)
barplot(a)
b <- runif(20, 1, 20)
plot(a,b)
help("plot")
image(a)
image(a,b)
plot(a, b)
b <- runif(50, 1, 200)
plot(a, b)
contour(a)
contour(a, b)
a <- c(1:50)
b <- c(151:200)
contour(a, b)
demo()
a <- sample(1:1000, 50, replace = F)
b <- sample(1:1000, 50, replace = F)
barplot(a)
barplot(b)
plot(a,b)
a
a
getwd()
cd R*
setwd("C:\Users\Sid\Documents\R Codes")
setwd(C:\Users\Sid\Documents\R Codes)
help(setwd)
dir <- "C:\Users\Sid\Documents\R Codes"
dir <- 'C:\Users\Sid\Documents\R Codes'
dir()
path.expand("C:\Users\Sid\Documents\R Codes")
cd
help(cd)
??cd
install.packages("swirl")
package_version("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;");
dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;");
dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
class(hg19)
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
allTables[length()]
allTables[length]
allTables[length-1]
allTables[length(allTables]
allTables[length(allTables)]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery()
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ")
htmlCode <- readLines(con)
close(con)
htmlCode
install.packages("XML", repos = "http://cran.us.r-project.org")
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(XML)
install.packages("XML")
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("github", key="7eeb5753524e12ead876", secret="ef33989a51346e93a46ceecc743e6e302fdfe953")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs")  ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")  ## NO
query4 <- sqldf("select * from acs where AGEP < 50")  ## NO
identical(query3, query4)
acs <- data.table(read.csv(f))
acs <- data.frame(read.csv(f))
install.packages("sqldf")
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs")  ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")  ## NO
query4 <- sqldf("select * from acs where AGEP < 50")  ## NO
identical(query3, query4)
library(sqldf)
library(gsubfn)
install.packages("gsubfn")
library(sqldf)
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs")  ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")  ## NO
query4 <- sqldf("select * from acs where AGEP < 50")  ## NO
identical(query3, query4)
setwd(".\\R Codes")
x <- runif(10, min = 0, max = 1)
x
x <- runif(10, min = 0, max = 10)
x
library(iris)
library(datasets)
data("iris")
?iriss
?iris
head(iris)
View(iris)
v <- subset(iris, iris$Species == 'virginica')
View(v)
summary(v)
mean(v$Sepal.Length)
round(mean(v$Sepal.Length))
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
head(iris)
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
mean(iris$Sepal.Length)
library(datasets)
data("mtcars")
view(mtcars)
View(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
z <- subset(mtcars, (mtcars$cyl == 4 || mtcars$cyl == 8))
z
z <- subset(mtcars, (mtcars$cyl == 4 && mtcars$cyl == 8))
z <- subset(mtcars, mtcars$cyl == 4)
z
z <- subset(mtcars, mtcars$cyl == 4 || mtcars$cyl == 8)
z
z <- subset(mtcars, mtcars$cyl == 4)
z <- subset(mtcars, mtcars$cyl == 8)
z <- tapply(hp, cyl, mean)
z <- tapply(mtcars$hp, mtcars$cyl, mean)
z
z[3] - z[1]
round(z[3] - z[1])
debug(ls)
ls()
setwd(".\\ ProgrammingAssignment2")
setwd(".\\ProgrammingAssignment2")
ls
dir
